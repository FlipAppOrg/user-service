name: CI/CD Pipeline

on: 
  push:
    branches:
        - dev # You can use any of your root or master branch name

jobs:
  init:
    name: "init"
    runs-on: "ubuntu-latest"
    outputs:
      environment_output: ${{ steps.set_environment.outputs.environment_output }}

    steps:
      - name: "set environment"
        id: set_environment
        run: |
          if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
            echo "environment_output=prod" >> $GITHUB_OUTPUT
          fi
          if [[ "${{github.base_ref}}" == "dev" || "${{github.ref}}" == "refs/heads/dev" ]]; then
            echo "environment_output=dev" >> $GITHUB_OUTPUT
          fi


      - name: "verfiy environment"
        id: verifyvars
        run: |
          echo "ENVIRONMENT_OUTPUT= $environment_output" 

  build-container:
    runs-on: ubuntu-latest
    environment: ${{ needs.init.outputs.environment_output }}
    needs:
      - init
    outputs:
      environment_output: ${{ needs.init.outputs.environment_output }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push to Elastic Container Registry
        id: build-image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.run_number }}
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:user-service_${{env.IMAGE_TAG}}
          secrets: |
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            TWILIO_SID=${{ secrets.TWILIO_SID }}
            TWILIO_AUTH=${{ secrets.TWILIO_AUTH }}
          build-args: |
            ENV=${{ vars.ENV }}
            APPLICATION_NAME=${{ vars.APPLICATION_NAME }}
            PORT=${{ vars.PORT }}
            LOG_DIR=${{ vars.LOG_DIR }}
            DB_HOST=${{ vars.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            DB_DATABASE=${{ vars.DB_DATABASE }}
            ORIGIN=${{ vars.ORIGIN }}
            CREDENTIALS=${{ vars.CREDENTIALS }}
            NODE_ENV=${{ needs.init.outputs.environment_output }}
        


  # lambda-deploy:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout to repo
  #       uses: actions/checkout@v4

  #     - name: Setup node environment
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18.x'
          
  #     - name: Install dependencies
  #       run: npm install -g serverless

  #     - name: Configure serverless authentication
  #       run: serverless config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY }} --secret ${{ secrets.AWS_SECRET_KEY }}
      
  #     - name: Install npm dependencies
  #       run: npm install
     
  #     - name: Deploy lambda function
  #       env: 
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  #         ENV: ${{ vars.ENV }}
  #         PG_DB_USERNAME: ${{ secrets.PG_DB_USERNAME }}
  #         PG_DB_PASSWORD: ${{ secrets.PG_DB_PASSWORD }}
  #         PG_DB_ENDPOINT: ${{ vars.PG_DB_ENDPOINT }}
  #         PG_DB_PORT: ${{ vars.PG_DB_PORT }}
  #         PG_DB: ${{ vars.PG_DB }}
  #         SECRET_KEY: ${{ secrets.SECRET_KEY }}
  #         LOG_FORMAT: dev
  #         LOG_DIR: ../logs
  #         ORIGIN: '*'
  #         CREDENTIALS: ${{ vars.CREDENTIALS }}
  #         TWILIO_SID: ${{ vars.TWILIO_SID }}
  #         TWILIO_AUTH: ${{ vars.TWILIO_AUTH }}
  #       run: serverless deploy --stage ${{ vars.ENV }}
# on:
#   push:
#     branches:
#       - masterl

# jobs:
#   build_and_test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Use Node.js 16
#         uses: actions/setup-node@v2
#         with:
#           node-version: '16'

#       - name: Install dependencies
#         run: npm install

#       - name: Run tests
#         run: npm test

#   docker_build:
#     needs: build_and_test
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Build Docker image
#         run: |
#           docker build -t your_image_name .
